"use client";
import { useState, useEffect } from "react";
import Modal from "@/components/ui/Modal";
import { motion } from "framer-motion";
import { Upload, XCircle } from "lucide-react";
import { useToast } from "@/components/toasts/useToast";
import axios from "axios";
import { API_BASE_URL } from "@/config";
import ConfirmAlert from "@/components/alerts/ConfirmAlert";
import Image from "next/image";
import { EditableProduct } from "@/lib/types/interface";

interface AddProductModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (product: EditableProduct) => void; // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô any ‡πÄ‡∏õ‡πá‡∏ô EditableProduct
  product?: EditableProduct; // ‚úÖ ‡πÉ‡∏ä‡πâ EditableProduct ‡πÅ‡∏ó‡∏ô any
}

export default function AddProductModal({ isOpen, onClose, onSave, product }: AddProductModalProps) {
  const [productData, setProductData] = useState<EditableProduct>({
    _id: "",
    name: "",
    price: 0,
    stock: 0,
    color: "",
    size: "",
    description: "",
    images: [],      // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ images ‡∏î‡πâ‡∏ß‡∏¢
    oldImages: [],   // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°
    newImages: [],   // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
    status: "available",
  });

  const { showToast } = useToast();
  const [isConfirmOpen, setIsConfirmOpen] = useState(false);
  const [imageToDelete, setImageToDelete] = useState<{ index: number, isOld: boolean } | null>(null);

  

  const confirmRemoveImage = (index: number, isOld: boolean) => {
    setImageToDelete({ index, isOld });
    setIsConfirmOpen(true);
  };

  const handleConfirmDelete = async () => {
    if (!imageToDelete) return;
    await removeImage(imageToDelete.index, imageToDelete.isOld);
    setIsConfirmOpen(false);
  };

  useEffect(() => {
    if (product) {
      setProductData({
        _id: product._id || "",
        name: product.name || "",
        price: Number(product.price) || 0,
        stock: Number(product.stock) || 0,
        color: product.color || "",
        size: product.size || "",
        description: product.description || "",
        images: product.images || [],  // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ images ‡∏î‡πâ‡∏ß‡∏¢
        oldImages: product.images || [], // ‚úÖ oldImages = images ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å DB
        newImages: [],
        status: product.status || "available",
      });
    } else {
      setProductData({
        _id: "",
        name: "",
        price: 0,
        stock: 0,
        color: "",
        size: "",
        description: "",
        images: [],  // ‚úÖ images ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        oldImages: [],
        newImages: [],
        status: "available",
      });
    }
  }, [product]);
  
  
  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setProductData((prev) => ({ ...prev, [name]: value }));
  };

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files) {
      if (productData.oldImages.length + productData.newImages.length + files.length > 5) {
        showToast("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏£‡∏π‡∏õ", "error");
        return;
      }
      setProductData((prev) => ({
        ...prev,
        newImages: [...prev.newImages, ...Array.from(files)], // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
      }));
    }
  };
  

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const removeImage = async (index: number, isOld: boolean) => {
  if (isOld) {
    const imageUrl = productData.oldImages[index];
    const filename = imageUrl.split("/").pop()?.split(".")[0]; // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå

    if (!filename) {
      showToast("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå", "error");
      return;
    }

    try {
      const response = await axios.post(`${API_BASE_URL}/products/delete-image`, { publicId: filename,productId: productData._id });

      if (response.status === 200) {
        showToast("‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");

        setProductData((prev) => ({
          ...prev,
          oldImages: prev.oldImages.filter((_, i) => i !== index),
        }));
      } else {
        showToast("‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "error");
      }
    } catch (error) {
      console.error("‚ùå API ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
      showToast("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ", "error");
    }
  } else {
    setProductData((prev) => ({
      ...prev,
      newImages: prev.newImages.filter((_, i) => i !== index),
    }));
  }
};

  
  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const handleSave = () => {
    if (!productData.name || !productData.price || !productData.stock || !productData.color || !productData.size) {
      showToast("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö", "error");
      return;
    }
  
    if (productData.oldImages.length + productData.newImages.length === 0) {
      showToast("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", "error");
      return;
    }
  
    // ‚úÖ ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° `newImages` ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö `oldImages` ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ `newImages` ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
    const updatedProduct: EditableProduct = {
      ...productData,
      images: productData.oldImages, // ‚úÖ ‡πÉ‡∏ä‡πâ `oldImages` ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      newImages: productData.newImages, // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô
    };
  
    onSave(updatedProduct);
    onClose();
  };
  
  return (
    <Modal isOpen={isOpen} onClose={onClose} title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà">
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.2 }}
        className="grid grid-cols-1 md:grid-cols-2 gap-4"
      >
        {/* üè∑Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
        <div>
          <label className="block text-gray-700">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</label>
          <input
            type="text"
            name="name"
            value={productData.name}
            onChange={handleChange}
            className="w-full p-2 border rounded-lg"
            autoComplete="off"
          />
        </div>

        {/* üè∑Ô∏è ‡∏£‡∏≤‡∏Ñ‡∏≤ */}
        <div>
          <label className="block text-gray-700">‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)</label>
          <input
            type="number"
            name="price"
            value={productData.price}
            onChange={handleChange}
            className="w-full p-2 border rounded-lg"
            autoComplete="off"
          />
        </div>

        {/* üè∑Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
        <div>
          <label className="block text-gray-700">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å</label>
          <input
            type="number"
            name="stock"
            value={productData.stock}
            onChange={handleChange}
            className="w-full p-2 border rounded-lg"
            autoComplete="off"
          />
        </div>

        {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤(‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢) */}
        <div>
          <label className="block text-gray-700">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</label>
          <select
            name="status"
            value={productData.status}
            onChange={handleChange}
            className="w-full p-2 border rounded-lg"
          >
            <option value="available">‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢</option>
            <option value="unavailable">‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢</option>
          </select>
        </div>

        {/* üé® ‡∏™‡∏µ */}
        <div>
          <label className="block text-gray-700">‡∏™‡∏µ</label>
          <input
            type="text"
            name="color"
            value={productData.color}
            onChange={handleChange}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏≤‡∏ß, ‡∏î‡∏≥, ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô"
            className="w-full p-2 border rounded-lg"
            autoComplete="off"
          />
        </div>

        {/* üìè ‡πÑ‡∏ã‡∏™‡πå */}
        <div>
          <label className="block text-gray-700">‡πÑ‡∏ã‡∏™‡πå</label>
          <input
            type="text"
            name="size"
            value={productData.size}
            onChange={handleChange}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô S, M, L, XL"
            className="w-full p-2 border rounded-lg"
            autoComplete="off"
          />
        </div>

        {/* üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
        <div className="col-span-2">
          <label className="block text-gray-700">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</label>
          <textarea
            name="description"
            value={productData.description}
            onChange={handleChange}
            className="w-full p-2 border rounded-lg"
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ, ‡∏£‡∏≠‡∏ö‡∏≠‡∏Å, ‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß, ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï ‡∏Ø‡∏•‡∏Ø"
            autoComplete="off"
          />
        </div>
      </motion.div>

      {/* üñºÔ∏è ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
      <div className="col-span-2">
          <label className="block text-gray-700">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏£‡∏π‡∏õ)</label>
          <div className="border-dashed border-2 border-gray-300 rounded-lg p-4 text-center cursor-pointer hover:bg-gray-100 transition">
            <input
              type="file"
              multiple
              accept="image/*"
              onChange={handleFileChange}
              className="hidden"
              id="upload-images"
            />
            <label htmlFor="upload-images" className="cursor-pointer flex flex-col items-center">
              <Upload className="w-10 h-10 text-gray-500" />
              <span className="text-gray-600">‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå</span>
            </label>
          </div>

          {/* Preview ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
          <div className="mt-4 grid grid-cols-5 gap-2">
           {/* üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
            {productData.oldImages.map((url, index) => (
              <div key={`old-${index}`} className="relative group">
                <Image src={url} alt="Product Image" width={100} height={100} className="object-cover rounded-md" />
                <button
                  onClick={() => confirmRemoveImage(index, true)}
                  className="absolute top-0 right-0 bg-black/50 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition"
                >
                  <XCircle className="w-4 h-4" />
                </button>
              </div>
            ))}

            {/* üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß) */}
            {productData.newImages.map((file, index) => (
              <div key={`new-${index}`} className="relative group">
                <Image src={URL.createObjectURL(file)} alt="New Product Image" width={100} height={100} className="object-cover rounded-md" />
                <button
                  onClick={() => confirmRemoveImage(index, false)}
                  className="absolute top-0 right-0 bg-black/50 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition"
                >
                  <XCircle className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>
        </div>

        <ConfirmAlert
          isOpen={isConfirmOpen}
          onClose={() => setIsConfirmOpen(false)}
          onConfirm={handleConfirmDelete}
          title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ"
          message="‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ? ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ"
        />



      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
      <motion.button
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={handleSave}
        className="w-full bg-green-500 text-white py-2 rounded-lg hover:bg-green-600 transition mt-4"
      >
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      </motion.button>
    </Modal>
    
  );
}
"use client";
import { useState, useEffect,useRef } from "react";
import axios from "axios";
import { PlusCircle } from "lucide-react";
import AddProductModal from "@/components/modals/AddProductModal";
import { API_BASE_URL } from "@/config"; // API URL
import { CLOUDINARY_UPLOAD_URL, CLOUDINARY_UPLOAD_PRESET } from "@/config";
import InfoModal from "@/components/modals/InfoModal";
import { motion } from "framer-motion";
import { CldImage } from "next-cloudinary";
import { Info, Edit, Trash } from "lucide-react";
import { useToast } from "@/components/toasts/useToast";
import ConfirmAlert from "@/components/alerts/ConfirmAlert";
import { Product, EditableProduct } from "@/lib/types/interface";

export default function ProductPage() {
  
  const [isOpen, setIsOpen] = useState(false);
  const [isInfoOpen, setIsInfoOpen] = useState(false);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedProduct, setSelectedProduct] = useState<EditableProduct | undefined>(undefined);
  const { showToast } = useToast();
  const isFetched = useRef(false); // ‚úÖ ‡πÉ‡∏ä‡πâ useRef ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥
  const [isDeleteOpen, setIsDeleteOpen] = useState(false);
  const [deleteProductId, setDeleteProductId] = useState<string | null>(null);

  // üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å API ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
  useEffect(() => {
    if (!isFetched.current) {
      isFetched.current = true; // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô API ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
      fetchProducts();
    }
  }, []);

  const handleOpenModal = () => setIsOpen(true);

  const fetchProducts = () => {
    axios.get(`${API_BASE_URL}/products/list`)
      .then((response) => setProducts([...response.data]))
      .catch((error) => console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error));
  };

  const clearModal = () => {
    setIsOpen(false);
    setSelectedProduct(undefined);
  }

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary
  const uploadImagesToCloudinary = async (images: File[]) => {
    try {
      const uploadedImages = [];

      for (const image of images) {
        const formData = new FormData();
        formData.append("file", image);
        formData.append("upload_preset", CLOUDINARY_UPLOAD_PRESET);

        const response = await axios.post(CLOUDINARY_UPLOAD_URL, formData);

        uploadedImages.push(response.data.secure_url);
      }

      return uploadedImages; // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    } catch (error) {
      console.error("‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
      return [];
    }
  };
  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const handleSaveProduct = async (product: EditableProduct) => {
    try {
      console.log("üîç Debug: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", product);
  
      // ‚úÖ ‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡πà‡∏≤ + ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ
      const oldImages = product.oldImages || [];
      const newImages = product.newImages || [];
      let uploadedImages = [...oldImages];
  
      console.log("üîç Debug: ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡πà‡∏≤", oldImages);
      console.log("üîç Debug: ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà", newImages);
  
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° oldImages + newImages
      if (oldImages.length === 0 && newImages.length === 0) {
        console.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ");
        return;
      }
  
      // üìå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary
      if (newImages.length > 0) {
        const newUploadedImages = await uploadImagesToCloudinary(newImages);
        console.log("‚úÖ Debug: ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", newUploadedImages);
        uploadedImages = [...uploadedImages, ...newUploadedImages]; // ‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡πà‡∏≤
      }
  
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
      if (uploadedImages.length === 0) {
        console.error("‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        return;
      }
  
      // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
      const productData = {
        _id: product._id,
        name: product.name,
        price: product.price,
        stock: product.stock,
        images: uploadedImages, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° oldImages + newImages ‡πÅ‡∏•‡πâ‡∏ß
        color: product.color,
        size: product.size,
        description: product.description,
        status: product.status || "available",
      };
  
      console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", productData);
  
      // üîπ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
      if (product._id) {
        // üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        await axios.put(`${API_BASE_URL}/products/update/${product._id}`, productData, {
          headers: { "Content-Type": "application/json" },
        });
        showToast("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
      } else {
        // üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        await axios.post(`${API_BASE_URL}/products/add`, productData, {
          headers: { "Content-Type": "application/json" },
        });
        showToast("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
      }
      fetchProducts();

      clearModal();

    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    }
  };
  
  
  const handleEditProduct = async (product: Product) => {
     // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ images ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ Modal
    axios.get(`${API_BASE_URL}/products/${product._id}`).then((response) => {
      setSelectedProduct({
        ...response.data, 
        oldImages: response.data.images || [],
        newImages: [],
      });
      setIsOpen(true);
    });
  };
  

  // üìå ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
const handleOpenDeleteModal = (productId: string) => {
  setDeleteProductId(productId);
  setIsDeleteOpen(true);
};

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
const handleDeleteProduct = async () => {
  if (!deleteProductId) return;

  try {
    await axios.delete(`${API_BASE_URL}/products/delete/${deleteProductId}`);
    setProducts(products.filter((product) => product._id !== deleteProductId));
    showToast("‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "success");
  } catch (error) {
    console.error("‚ùå ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
    showToast("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ", "error");
  }

  setIsDeleteOpen(false); // ‡∏õ‡∏¥‡∏î Modal ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
};


  return (
    <div className="container mx-auto px-4 py-6">
      <h1 className="text-2xl font-bold">üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h1>
      <button
        onClick={() => setIsOpen(true)}
        className="mt-4 flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition"
      >
        <PlusCircle className="w-5 h-5" />
        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      </button>
  
      {/* ‚ú® Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
      <AddProductModal
      isOpen={isOpen}
      onClose={() => {
        setIsOpen(false);
        setSelectedProduct(undefined); 
      }}
      onSave={handleSaveProduct}
      product={selectedProduct ?? undefined}
    />
  
      <div className="pt-4">
        <h1 className="text-3xl font-bold mb-6">üõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h1>
  
        {/* üîπ Grid Layout ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-6">
          {products.map((product, index) => (
            <motion.div
              key={product._id}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: index * 0.1 }}
              className="relative w-full max-w-xs h-64 rounded-lg overflow-hidden shadow-lg transition group bg-white"
            >
              {/* üîπ ‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
              <motion.div className="relative w-full h-full overflow-hidden">
                <CldImage
                  src={product.images[0]}
                  alt={product.name}
                  width={200}
                  height={200}
                  crop={{ type: "auto", source: true }}
                  className="w-full h-full object-cover transition-transform duration-300"
                  priority={true}
                />
                <div className="absolute inset-0 bg-gradient-to-b from-black/50 via-transparent to-black/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
              </motion.div>

              {/* üîπ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
              <div className="absolute top-3 left-1/2 transform -translate-x-1/2 bg-black/50 text-white px-3 py-1 rounded-lg text-sm opacity-80">
                {product.name}
              </div>

               {/* üîπ ‡∏õ‡∏∏‡πà‡∏° Info (‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏•‡∏≠‡∏î) */}
               <button
                onClick={() => {
                  setSelectedProduct({
                    ...product,
                    oldImages: product.images, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î oldImages ‡∏à‡∏≤‡∏Å images ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                    newImages: [] // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ß‡πà‡∏≤‡∏á
                  });
                  setIsInfoOpen(true);
                }}
                className="absolute top-3 right-3 p-2 rounded-full shadow-md z-20
                          bg-gray-700/40 backdrop-blur-md text-white
                          hover:bg-gray-400/50 transition duration-300"
              >
                <Info size={20} />
              </button>
  
              {/* üîπ Action Icons (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ Hover) */}
              <motion.div
                className="absolute inset-0 flex items-end justify-end p-3 opacity-0 
             group-hover:opacity-100 transition-opacity z-10 gap-3"
                initial={{ opacity: 0 }}
                whileHover={{ opacity: 1 }}
                transition={{ duration: 0.3 }}
              >
                {/* üîπ Edit */}
                <button className="bg-gray-700/40 text-white p-3 rounded-full shadow-md hover:bg-gray-400/50"
                onClick={() => handleEditProduct(product)}>
                  <Edit size={20} />
                </button>
  
                {/* üîπ Delete */}
                <button
                  className="bg-red-500 text-white p-3 rounded-full shadow-md hover:bg-red-600"
                  onClick={() => handleOpenDeleteModal(product._id)}
                >
                  <Trash size={20} />
                </button>
              </motion.div>
            </motion.div>
          ))}
        </div>

        {/* üè∑Ô∏è ‡πÉ‡∏ä‡πâ InfoModal ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
        {selectedProduct && (
          <InfoModal
            isOpen={isInfoOpen}
            onClose={() => { 
              setIsInfoOpen(false);
              setSelectedProduct(undefined) }}
            product={selectedProduct}
          />
        )}

        <ConfirmAlert
          isOpen={isDeleteOpen}
          onClose={() => setIsDeleteOpen(false)}
          onConfirm={handleDeleteProduct}
          title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
          message="‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ? ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ"
        />

      </div>
    </div>
  );  
}
